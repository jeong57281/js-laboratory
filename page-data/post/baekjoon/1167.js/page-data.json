{"componentChunkName":"component---src-templates-post-tsx","path":"/post/baekjoon/1167.js","result":{"data":{"file":{"ext":".js","name":"1167","fields":{"content":"const fs = require(\"fs\");\nconst filePath = process.platform === \"linux\" ? \"/dev/stdin\" : \"./input\";\nconst stdin = fs\n  .readFileSync(filePath)\n  .toString()\n  .trim()\n  .split(\"\\n\")\n  .map((s) => s.trim());\nconst input = (() => {\n  let line = 0;\n  return () => stdin[line++];\n})();\n\nconst n = parseInt(input());\n\nconst adj = Array.from(Array(n + 1), () => []);\n\nfor (let i = 0; i < n; i++) {\n  const [u, ...vw] = input().split(\" \").map(Number);\n\n  vw.pop();\n\n  for (let j = 0; j < vw.length; j += 2) {\n    const v = vw[j];\n    const w = vw[j + 1];\n\n    adj[u].push({ node: v, w });\n  }\n}\n\nconst dfs = (node, visited, candidate, weight) => {\n  // 기저 사례\n  visited[node] = true;\n\n  const children = adj[node].filter((value) => !visited[value.node]);\n\n  if (!children.length) {\n    candidate.push({ node, weight });\n    return;\n  }\n\n  // 재귀 호출\n  children.forEach((value) => {\n    dfs(value.node, visited, candidate, weight + value.w);\n  });\n};\n\nconst candidate = [];\n\ndfs(1, Array(n + 1).fill(false), candidate, 0);\n\nconst finalCandidate = [];\n\ndfs(\n  candidate.sort((a, b) => {\n    if (a.weight > b.weight) {\n      return -1;\n    } else {\n      return 1;\n    }\n  })[0].node,\n  Array(n + 1).fill(false),\n  finalCandidate,\n  0\n);\n\nconsole.log(\n  finalCandidate.sort((a, b) => {\n    if (a.weight > b.weight) {\n      return -1;\n    } else {\n      return 1;\n    }\n  })[0].weight\n);\n","stampObject":{"modified":1675685906,"created":1675685905}}},"markdownRemark":{"html":"<p>트리에서의 다이나믹 프로그래밍으로도 풀 수 있다고 하는데, 풀이가 궁금하다. 복잡도는 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> 이라고 함.</p>","frontmatter":{"title":"1167번: 트리의 지름"}}},"pageContext":{"slug":"baekjoon/1167.js","slugNoExt":"baekjoon/1167","repoName":"algorithm-storage","userName":"jeong57281","profileUrl":"https://avatars.githubusercontent.com/u/44913775?v=4","utterances":"jeong57281/jeong57281.github.io","googleSiteVerification":"LwKjAts-rLkskyg9wgFh0L-OC3Y2Eo2T4SBrqPjxu8c"}},"staticQueryHashes":[],"slicesMap":{}}