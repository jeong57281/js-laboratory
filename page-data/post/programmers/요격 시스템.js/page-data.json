{"componentChunkName":"component---src-templates-post-tsx","path":"/post/programmers/요격 시스템.js","result":{"data":{"file":{"ext":".js","name":"요격 시스템","fields":{"content":"function solution(targets) {\n  var answer = 0;\n\n  const n = targets.length;\n\n  const isDestroy = Array(n).fill(false);\n\n  const _targets = [];\n\n  const TYPE = {\n    S: 0,\n    E: 1,\n  };\n\n  targets.forEach(([s, e], i) => {\n    _targets.push({ x: s, type: TYPE.S, i });\n    _targets.push({ x: e, type: TYPE.E, i });\n  });\n\n  _targets.sort((a, b) => {\n    if (a.x < b.x) {\n      return -1;\n    } else if (a.x > b.x) {\n      return 1;\n    } else {\n      if (a.type > b.type) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n  });\n\n  const stack = [];\n\n  _targets.forEach(({ x, type, i }) => {\n    switch (type) {\n      case TYPE.S:\n        stack.push(i);\n        break;\n      case TYPE.E:\n        if (isDestroy[i]) {\n          break;\n        }\n\n        while (stack.length) {\n          const index = stack.pop();\n\n          isDestroy[index] = true;\n        }\n\n        answer++;\n\n        break;\n    }\n  });\n\n  return answer;\n}\n","stampObject":{"modified":1683102505,"created":1683102505}}},"markdownRemark":{"html":"<p>다른 사람들의 풀이를 보니 정렬만으로 풀이가 가능한 것 같은데, 나는 좀 더 어렵게 풀었다.</p>\n<h2>풀이 방법</h2>\n<p>A 나라에서 발사한 폭격 미사일은 <strong>모두</strong> 파괴되어야 하므로, 폭격 미사일의 닫는 구간 <code>e</code>를 지나기 전에는 최소 하나의 요격 미사일이 발사되어야 한다.</p>\n<p>발사해야하는 요격 미사일의 최소 개수를 알려면 여러 폭격 미사일 중, 어느 미사일의 닫는 구간 <code>e</code>에서 요격 미사일을 발사해야하는지를 알아야 한다.</p>\n<p>이는 정렬을 통해 알아낼 수 있다. 구간 값 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>e</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(s, e)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mclose\">)</span></span></span></span></span> 를 모두 오름차순으로 정렬하고 여는 구간 <code>s</code>이 <strong>연달아 나올 경우</strong> 요격 미사일을 발사하지 않다가, 닫는 구간 <code>e</code>을 마주치면 요격 미사일을 하나 발사하여 앞서 날라온 폭격 미사일을 모두 파괴하는 것이다.</p>\n<ol>\n<li>폭격 미사일을 다음과 같은 형태로 재가공한 후 x축 인덱스가 빠르고, 닫는 괄호가 먼저 오도록 정렬한다.</li>\n</ol>\n<deckgo-highlight-code language=\"js\" theme=\"one-light\"  >\n          <code slot=\"code\">{\n  x, // x축 값\n  type, // 여는 구간 or 닫는 구간\n  i, // 미사일의 인덱스\n}</code>\n        </deckgo-highlight-code>\n<ol start=\"2\">\n<li>요격 범위의 여는 구간이 들어오면 해당 미사일의 인덱스를 스택에 쌓아둔다.</li>\n<li>요격 범위의 닫는 구간이 들어오면 스택에 저장되어있는 모든 미사일을 폭파처리<code>isDestroy</code>하고 요격 미사일의 개수를 1증가시킨다. (단, 이미 폭파처리된 미사일의 닫는 구간일 경우 무시한다.)</li>\n</ol>","frontmatter":{"title":"Lv.2 요격 시스템"}}},"pageContext":{"slug":"programmers/요격 시스템.js","slugNoExt":"programmers/요격 시스템","repoName":"algorithm-storage","userName":"jeong57281","profileUrl":"https://avatars.githubusercontent.com/u/44913775?v=4","utterances":"jeong57281/jeong57281.github.io","googleSiteVerification":"LwKjAts-rLkskyg9wgFh0L-OC3Y2Eo2T4SBrqPjxu8c"}},"staticQueryHashes":[],"slicesMap":{}}